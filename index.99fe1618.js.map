{"mappings":"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","sources":["input.js","snake.js","obstacles.js","points.js","food.js","constants.js","draw.js","endGame.js","music.js","keys.js","index.js"],"sourcesContent":["export let inputDirection = { x: -1, y: 0 };\n\nexport const getSnakeDirectionName = () => {\n  let currentSnakeDirection = \"up\";\n\n  if (inputDirection.y === -1) {\n    currentSnakeDirection = \"left\";\n  }\n  if (inputDirection.y === 1) {\n    currentSnakeDirection = \"right\";\n  }\n  if (inputDirection.x === -1) {\n    currentSnakeDirection = \"up\";\n  }\n  if (inputDirection.x === 1) {\n    currentSnakeDirection = \"down\";\n  }\n\n  return currentSnakeDirection;\n};\n\nlet lastSnakeDirection = inputDirection;\n\nconst getLastSnakeDirection = () => lastSnakeDirection;\n\nexport const setLastSnakeDirection = (direction) => {\n  if (direction) {\n    lastSnakeDirection = { ...direction };\n  }\n};\n\nconst setDirection = (key) => {\n  switch (key) {\n    case \"ArrowLeft\":\n      if (getLastSnakeDirection().y === 0) {\n        inputDirection = { x: 0, y: -1 };\n      }\n      break;\n    case \"ArrowRight\":\n      if (getLastSnakeDirection().y === 0) {\n        inputDirection = { x: 0, y: 1 };\n      }\n      break;\n    case \"ArrowUp\":\n      if (getLastSnakeDirection().x === 0) {\n        inputDirection = { x: -1, y: 0 };\n      }\n      break;\n    case \"ArrowDown\":\n      if (getLastSnakeDirection().x === 0) {\n        inputDirection = { x: 1, y: 0 };\n      }\n      break;\n    default:\n      break;\n  }\n};\n\ndocument.addEventListener(\"keydown\", (e) => {\n  const key = e.key;\n  setDirection(key);\n});\n\nexport const getInputDirection = () => inputDirection;\n\naddEventListener(\"click\", (e) => {\n  const keyNumber = e.target.getAttribute(\"data-key\");\n  let keyName = null;\n\n  if (keyNumber) {\n    switch (Number(keyNumber)) {\n      case 37:\n        keyName = \"ArrowLeft\";\n        break;\n      case 39:\n        keyName = \"ArrowRight\";\n        break;\n      case 38:\n        keyName = \"ArrowUp\";\n        break;\n      case 40:\n        keyName = \"ArrowDown\";\n        break;\n\n      default:\n        break;\n    }\n\n    if (keyName) {\n      setDirection(keyName);\n    }\n  }\n});\n","import { GAME_SIZE } from \"./constants.js\";\nimport { getInputDirection, setLastSnakeDirection } from \"./input.js\";\n\nconst initSnakePosition = () => {\n  return [\n    { x: GAME_SIZE - 3, y: GAME_SIZE - 1 },\n    { x: GAME_SIZE - 2, y: GAME_SIZE - 1 },\n    { x: GAME_SIZE - 1, y: GAME_SIZE - 1 },\n  ];\n};\n\nlet snakePosition = initSnakePosition();\n\nexport const getSnakePosition = () => snakePosition;\nexport const setSnakePosition = (newSnakePosition) =>\n  (snakePosition = [...newSnakePosition]);\n\nexport const update = () => {\n  let currentSnakePosition = [...getSnakePosition()];\n\n  const inputDirection = getInputDirection();\n\n  for (let i = currentSnakePosition.length - 2; i >= 0; i--) {\n    currentSnakePosition[i + 1] = { ...currentSnakePosition[i] };\n  }\n\n  currentSnakePosition = currentSnakePosition.slice(1);\n\n  const newHeadPosition = {\n    x: currentSnakePosition[0].x + inputDirection.x,\n    y: currentSnakePosition[0].y + inputDirection.y,\n  };\n\n  setSnakePosition([newHeadPosition, ...currentSnakePosition]);\n  setLastSnakeDirection(inputDirection);\n};\n\nexport const onSnake = (element, options) => {\n  if (!element) {\n    return false;\n  }\n  const snakePosition = options?.withoutHead\n    ? [...getSnakePosition()].slice(1)\n    : getSnakePosition();\n  if (\n    snakePosition.some(\n      (segment) => segment.x === element.x && segment.y === element.y\n    )\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const expandSnake = () => {\n  const snakePosition = getSnakePosition();\n  snakePosition[snakePosition.length] = snakePosition[snakePosition.length - 1];\n  setSnakePosition(snakePosition);\n};\n","let obstaclePositions = [\n  { x: 2, y: 3 },\n  { x: 2, y: 4 },\n  { x: 2, y: 5 },\n]\n\nexport class Obstacles {\n  static #obstacles = obstaclePositions;\n\n  static getObstacles() {\n    return this.#obstacles;\n  }\n\n  static setObstacles(obstacles) {\n    this.#obstacles = obstacles;\n  }\n\n  static onObstacle = (element) => {\n    const obstaclesPosition = this.getObstacles();\n    if (\n      obstaclesPosition.some(\n        (segment) => segment.x === element.x && segment.y === element.y\n      )\n    ) {\n      return true;\n    }\n    return false;\n  };\n}","export class Points {\n  static points = 0;\n\n  static getPoints() {\n    return this.points;\n  }\n\n  static setPoints(points) {\n    this.points = points;\n  }\n}","import { GAME_SIZE, GAME_SPEED } from \"./constants.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { Points } from \"./points.js\";\nimport { onSnake, expandSnake } from \"./snake.js\";\n\nlet foodPosition = {\n  x: 7,\n  y: 8,\n};\n\nlet extraFoodPosition = {\n  x: 5,\n  y: 6,\n};\n\nexport const getFoodPosition = () => foodPosition;\nexport const getExtraFoodPosition = () => extraFoodPosition;\nexport const setFoodPosition = (newFoodPosition) =>\n  (foodPosition = { ...newFoodPosition });\n\nexport const setExtraFoodPosition = (newFoodPosition) =>\n  (extraFoodPosition = { ...newFoodPosition });\n\nexport const removeExtraFoodPosition = () => (extraFoodPosition = null);\n\nexport const update = () => {\n  if (onSnake(getFoodPosition())) {\n    Points.setPoints(Points.getPoints() + GAME_SPEED);\n    expandSnake();\n    respawnFood();\n    if (shouldRespawnExtraFood()) {\n      respawnExtraFood();\n    }\n  } else if (onSnake(getExtraFoodPosition())) {\n    Points.setPoints(Points.getPoints() + 4 * GAME_SPEED);\n    expandSnake();\n    removeExtraFoodPosition();\n  }\n};\n\nconst respawnFood = () => {\n  let newFoodPosition = null;\n  while (\n    newFoodPosition === null ||\n    onSnake(newFoodPosition) ||\n    Obstacles.onObstacle(newFoodPosition)\n  ) {\n    const x = Math.floor(Math.random() * GAME_SIZE);\n    const y = Math.floor(Math.random() * GAME_SIZE);\n    newFoodPosition = { x, y };\n  }\n\n  setFoodPosition(newFoodPosition);\n};\n\nconst shouldRespawnExtraFood = () => {\n  if (getExtraFoodPosition()) {\n    return false;\n  }\n  const POSSIBILITIES = 3;\n  const randomNumber = Math.floor(Math.random() * (POSSIBILITIES - 1));\n\n  return randomNumber % POSSIBILITIES === 0;\n};\n\nconst respawnExtraFood = () => {\n  let newExtraFoodPosition = null;\n  while (\n    newExtraFoodPosition === null ||\n    onSnake(newExtraFoodPosition) ||\n    Obstacles.onObstacle(newExtraFoodPosition)\n  ) {\n    const x = Math.floor(Math.random() * GAME_SIZE);\n    const y = Math.floor(Math.random() * GAME_SIZE);\n    newExtraFoodPosition = { x, y };\n  }\n\n  setExtraFoodPosition(newExtraFoodPosition);\n};\n","export const GAME_SIZE = 11;\nexport const GAME_SPEED = 2;\n","import { getSnakePosition } from \"./snake.js\";\nimport { getExtraFoodPosition, getFoodPosition } from \"./food.js\";\nimport { isGameStarted } from \"./index.js\";\nimport { Points } from \"./points.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { getSnakeDirectionName } from \"./input.js\";\nimport { GAME_SIZE } from \"./constants.js\";\n\nconst drawElement = (position, className) => {\n  if (position) {\n    const { x, y } = position;\n    const bodyElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n\n    bodyElements[0].classList.add(className);\n  }\n};\n\nconst drawObstacles = () => {\n  const obstacles = Obstacles.getObstacles();\n\n  obstacles.map(({ x, y }, i) => {\n    const boardElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n    if (boardElements.length) {\n      boardElements?.[0].classList?.add(\"obstacle\");\n    }\n  });\n};\n\nconst initialBoardDraw = () => {\n  const gameBoard = document.getElementById(\"game-board\");\n  gameBoard.innerHTML = \"\";\n\n  gameBoard.style.gridTemplateColumns = `repeat(${GAME_SIZE}, 1fr)`;\n  gameBoard.style.gridTemplateRows = `repeat(${GAME_SIZE}, 1fr)`;\n\n  for (let i = 0; i < GAME_SIZE; i++) {\n    for (let j = 0; j < GAME_SIZE; j++) {\n      const boardElement = document.createElement(\"div\");\n      boardElement.classList.add(\"board-element\", `board-element-${i}-${j}`);\n      gameBoard.appendChild(boardElement);\n    }\n  }\n};\n\nconst laterBoardDraw = () => {\n  for (let i = 0; i < GAME_SIZE; i++) {\n    for (let j = 0; j < GAME_SIZE; j++) {\n      const boardElement = document.getElementsByClassName(\n        `board-element-${i}-${j}`\n      );\n      boardElement[0].classList.remove(\n        `body-segment`,\n        `food-segment`,\n        `food-segment--extra`,\n        `body-segment--head`,\n        `body-segment--head-left`,\n        `body-segment--head-right`,\n        `body-segment--head-up`,\n        `body-segment--head-down`\n      );\n    }\n  }\n};\n\nexport const draw = () => {\n  if (!isGameStarted) {\n    initialBoardDraw();\n  } else {\n    laterBoardDraw();\n  }\n\n  // wynik\n  const x = document.getElementById(\"x\");\n  const y = document.getElementById(\"y\");\n  const pointsEl = document.getElementById(\"points\");\n\n  if (x && y) {\n    x.textContent = getSnakePosition()[0].x;\n    y.textContent = getSnakePosition()[0].y;\n  }\n  pointsEl.textContent = Points.getPoints();\n\n  // end wynik\n\n  getSnakePosition().map(({ x, y }, i) => {\n    const bodyElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n    if (bodyElements.length) {\n      if (i === 0) {\n        bodyElements?.[0].classList?.add(\n          `body-segment--head`,\n          `body-segment--head-${getSnakeDirectionName()}`\n        );\n      }\n      bodyElements?.[0].classList?.add(\"body-segment\");\n    }\n  });\n\n  drawElement(getFoodPosition(), \"food-segment\");\n  drawElement(getExtraFoodPosition(), \"food-segment--extra\");\n  drawObstacles();\n};\n","import { GAME_SIZE } from \"./constants.js\";\nimport { gameIntervelId } from \"./index.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { getSnakePosition, onSnake } from \"./snake.js\";\n\nconst restartGame = () => {\n  clearInterval(gameIntervelId);\n  window.location.reload();\n};\n\nexport const checkForDeath = () => {\n  const snakePosition = getSnakePosition();\n  const isHeadIsOnBody = onSnake(snakePosition[0], { withoutHead: true });\n  const isHeadOnObstacle = Obstacles.onObstacle(snakePosition[0], {\n    withoutHead: true,\n  });\n  const isSnakeOutsideGame =\n    snakePosition[0].x < 0 ||\n    snakePosition[0].y < 0 ||\n    snakePosition[0].x >= GAME_SIZE ||\n    snakePosition[0].y >= GAME_SIZE;\n  if (isHeadIsOnBody || isSnakeOutsideGame || isHeadOnObstacle) {\n    confirm(\"Koniec gry\", restartGame());\n  }\n};\n","const playButtonMusic = document.getElementById(\"play-music-button\");\nconst playerElement = document.getElementById(\"player\");\n\nconst playMusic = () => {\n  if (playerElement.paused) {\n    playerElement.play();\n    playButtonMusic.textContent = \"Pause music (M)\";\n  } else {\n    playerElement.pause();\n    playButtonMusic.textContent = \"Play music (M)\";\n  }\n};\n\nplayButtonMusic.addEventListener(\"click\", playMusic);\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.key == \"m\") {\n    playMusic();\n  }\n});\n","window.addEventListener(\"keyup\", arrowUp);\nwindow.addEventListener(\"keydown\", arrowDown);\n\nfunction arrowDown(e) {\n  const key = document.querySelector(`.arrow-key[data-key=\"${e.keyCode}\"]`);\n  if (key) {\n    key.classList.add(\"press\");\n  }\n}\nfunction arrowUp(e) {\n  const key = document.querySelector(`.arrow-key[data-key=\"${e.keyCode}\"]`);\n  if (key) {\n    key.classList.remove(\"press\");\n  }\n}\n","import { draw } from \"./draw.js\";\nimport { checkForDeath } from \"./endGame.js\";\nimport { update as updateFood } from \"./food.js\";\nimport { update as updateSnake, getSnakePosition, onSnake } from \"./snake.js\";\nimport \"/music.js\";\nimport \"./keys.js\";\nimport { GAME_SPEED } from \"./constants.js\";\n\nexport let isGameStarted = false;\n\nconst main = () => {\n  update();\n  draw();\n  isGameStarted = true;\n};\n\nexport const gameIntervelId = window.setInterval(main, 1000 / GAME_SPEED);\n\nconst update = () => {\n  updateSnake();\n  updateFood();\n  checkForDeath();\n};\n"],"names":["$0379ede947de91ce$export$78f72aca15d2b8f4","x","y","$0379ede947de91ce$export$f6b3620c8644578","currentSnakeDirection","$0379ede947de91ce$var$lastSnakeDirection","$0379ede947de91ce$var$getLastSnakeDirection","$0379ede947de91ce$var$setDirection","key","document","addEventListener","e","keyNumber","target","getAttribute","keyName","Number","$1bf822d9f03f4d1a$var$snakePosition","$1bf822d9f03f4d1a$export$ded1d07c75c5d29c","$1bf822d9f03f4d1a$export$28be8c991e35b4e3","newSnakePosition","$1bf822d9f03f4d1a$export$722fbec263ad908a","currentSnakePosition","inputDirection","i","length","slice","newHeadPosition","direction","$1bf822d9f03f4d1a$export$f7d30169ae36e02","element","options","withoutHead","some","segment","$1bf822d9f03f4d1a$export$5fc696b6f0d49101","snakePosition","$5ec5607e7d6e563f$var$obstaclePositions","$5ec5607e7d6e563f$export$c7227c6e188ae97","static","this","obstacles","getObstacles","$624917c8880ee964$export$1c787534cb11aa3e","points","$21581845d3143e01$var$foodPosition","$21581845d3143e01$var$extraFoodPosition","$21581845d3143e01$export$8375afbb03ac9b4c","$21581845d3143e01$export$5321e2bda8575dc2","$21581845d3143e01$export$722fbec263ad908a","setPoints","getPoints","$21581845d3143e01$var$respawnFood","$21581845d3143e01$var$shouldRespawnExtraFood","$21581845d3143e01$var$respawnExtraFood","newFoodPosition","onObstacle","Math","floor","random","$21581845d3143e01$export$4bcd21458045eba4","newExtraFoodPosition","$ac3888ccbf49bedd$var$drawElement","position","className","getElementsByClassName","classList","add","$ac3888ccbf49bedd$export$e529deb2bfd496dc","$dad545c909cfec2d$export$1568090200b360fa","j","remove","$ac3888ccbf49bedd$var$laterBoardDraw","gameBoard","getElementById","innerHTML","style","gridTemplateColumns","gridTemplateRows","boardElement","createElement","appendChild","$ac3888ccbf49bedd$var$initialBoardDraw","pointsEl","textContent","map","bodyElements","boardElements","$001607953185f538$export$e8a062691e6558ed","isHeadIsOnBody","isHeadOnObstacle","isSnakeOutsideGame","confirm","clearInterval","$dad545c909cfec2d$export$22a7dfc86488502a","window","location","reload","$5f26008d3422c6a9$var$playButtonMusic","$5f26008d3422c6a9$var$playerElement","$5f26008d3422c6a9$var$playMusic","paused","play","pause","querySelector","keyCode","setInterval","$dad545c909cfec2d$var$update"],"version":3,"file":"index.99fe1618.js.map"}