{"mappings":"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","sources":["input.js","snake.js","obstacles.js","points.js","food.js","draw.js","endGame.js","music.js","keys.js","index.js"],"sourcesContent":["export let inputDirection = { x: -1, y: 0 };\n\nexport const getSnakeDirectionName = () => {\n  let currentSnakeDirection = \"up\";\n\n  if (inputDirection.y === -1) {\n    currentSnakeDirection = \"left\";\n  }\n  if (inputDirection.y === 1) {\n    currentSnakeDirection = \"right\";\n  }\n  if (inputDirection.x === -1) {\n    currentSnakeDirection = \"up\";\n  }\n  if (inputDirection.x === 1) {\n    currentSnakeDirection = \"down\";\n  }\n\n  return currentSnakeDirection;\n};\n\nlet lastSnakeDirection = inputDirection;\n\nconst getLastSnakeDirection = () => lastSnakeDirection;\n\nexport const setLastSnakeDirection = (direction) => {\n  if (direction) {\n    lastSnakeDirection = { ...direction };\n  }\n};\n\nconst setDirection = (key) => {\n  switch (key) {\n    case \"ArrowLeft\":\n      if (getLastSnakeDirection().y === 0) {\n        inputDirection = { x: 0, y: -1 };\n      }\n      break;\n    case \"ArrowRight\":\n      if (getLastSnakeDirection().y === 0) {\n        inputDirection = { x: 0, y: 1 };\n      }\n      break;\n    case \"ArrowUp\":\n      if (getLastSnakeDirection().x === 0) {\n        inputDirection = { x: -1, y: 0 };\n      }\n      break;\n    case \"ArrowDown\":\n      if (getLastSnakeDirection().x === 0) {\n        inputDirection = { x: 1, y: 0 };\n      }\n      break;\n    default:\n      break;\n  }\n};\n\ndocument.addEventListener(\"keydown\", (e) => {\n  const key = e.key;\n  setDirection(key);\n});\n\nexport const getInputDirection = () => inputDirection;\n\naddEventListener(\"click\", (e) => {\n  const keyNumber = e.target.getAttribute(\"data-key\");\n  let keyName = null;\n\n  if (keyNumber) {\n    switch (Number(keyNumber)) {\n      case 37:\n        keyName = \"ArrowLeft\";\n        break;\n      case 39:\n        keyName = \"ArrowRight\";\n        break;\n      case 38:\n        keyName = \"ArrowUp\";\n        break;\n      case 40:\n        keyName = \"ArrowDown\";\n        break;\n\n      default:\n        break;\n    }\n\n    if (keyName) {\n      setDirection(keyName);\n    }\n  }\n});\n","import { getInputDirection, setLastSnakeDirection } from \"./input.js\";\n\nlet snakePosition = [\n  { x: 10, y: 10 },\n  { x: 11, y: 10 },\n  { x: 12, y: 10 },\n];\n\nexport const getSnakePosition = () => snakePosition;\nexport const setSnakePosition = (newSnakePosition) =>\n  (snakePosition = [...newSnakePosition]);\n\nexport const update = () => {\n  let currentSnakePosition = [...getSnakePosition()];\n\n  const inputDirection = getInputDirection();\n  console.log(\"elo\");\n  console.log(\n    \"ðŸš€ ~ file: snake.js:17 ~ update ~ inputDirection:\",\n    inputDirection\n  );\n\n  for (let i = currentSnakePosition.length - 2; i >= 0; i--) {\n    currentSnakePosition[i + 1] = { ...currentSnakePosition[i] };\n  }\n\n  currentSnakePosition = currentSnakePosition.slice(1);\n\n  const newHeadPosition = {\n    x: currentSnakePosition[0].x + inputDirection.x,\n    y: currentSnakePosition[0].y + inputDirection.y,\n  };\n\n  setSnakePosition([newHeadPosition, ...currentSnakePosition]);\n  setLastSnakeDirection(inputDirection);\n};\n\nexport const onSnake = (element, options) => {\n  if (!element) {\n    return false;\n  }\n  const snakePosition = options?.withoutHead\n    ? [...getSnakePosition()].slice(1)\n    : getSnakePosition();\n  if (\n    snakePosition.some(\n      (segment) => segment.x === element.x && segment.y === element.y\n    )\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const expandSnake = () => {\n  const snakePosition = getSnakePosition();\n  snakePosition[snakePosition.length] = snakePosition[snakePosition.length - 1];\n  setSnakePosition(snakePosition);\n};\n","let obstaclePositions = [\n  { x: 2, y: 3 },\n  { x: 2, y: 4 },\n  { x: 2, y: 5 },\n]\n\nexport class Obstacles {\n  static #obstacles = obstaclePositions;\n\n  static getObstacles() {\n    return this.#obstacles;\n  }\n\n  static setObstacles(obstacles) {\n    this.#obstacles = obstacles;\n  }\n\n  static onObstacle = (element) => {\n    const obstaclesPosition = this.getObstacles();\n    if (\n      obstaclesPosition.some(\n        (segment) => segment.x === element.x && segment.y === element.y\n      )\n    ) {\n      return true;\n    }\n    return false;\n  };\n}","export class Points {\n  static points = 0;\n\n  static getPoints() {\n    return this.points;\n  }\n\n  static setPoints(points) {\n    this.points = points;\n  }\n}","import { GAME_SIZE, GAME_SPEED } from \"./index.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { Points } from \"./points.js\";\nimport { onSnake, expandSnake } from \"./snake.js\";\n\nlet foodPosition = {\n  x: 7,\n  y: 8,\n};\n\nlet extraFoodPosition = {\n  x: 5,\n  y: 6,\n};\n\nexport const getFoodPosition = () => foodPosition;\nexport const getExtraFoodPosition = () => extraFoodPosition;\nexport const setFoodPosition = (newFoodPosition) =>\n  (foodPosition = { ...newFoodPosition });\n\nexport const setExtraFoodPosition = (newFoodPosition) =>\n  (extraFoodPosition = { ...newFoodPosition });\n\nexport const removeExtraFoodPosition = () => extraFoodPosition = null;\n\nexport const update = () => {\n  if (onSnake(getFoodPosition())) {\n    Points.setPoints(Points.getPoints() + GAME_SPEED);\n    expandSnake();\n    respawnFood();\n    if (shouldRespawnExtraFood()) {\n      respawnExtraFood();\n    }\n  }\n  else if (onSnake(getExtraFoodPosition())) {\n    Points.setPoints(Points.getPoints() + 4 * GAME_SPEED);\n    expandSnake();\n    removeExtraFoodPosition();\n  }\n};\n\nconst respawnFood = () => {\n  let newFoodPosition = null;\n  while (newFoodPosition === null || onSnake(newFoodPosition) || Obstacles.onObstacle(newFoodPosition)) {\n    const x = Math.floor(Math.random() * GAME_SIZE);\n    const y = Math.floor(Math.random() * GAME_SIZE);\n    newFoodPosition = { x, y };\n  }\n\n  setFoodPosition(newFoodPosition);\n};\n\nconst shouldRespawnExtraFood = () => {\n  if (getExtraFoodPosition()) {\n    return false;\n  }\n  const POSSIBILITIES = 3;\n  const randomNumber = Math.floor(Math.random() * (POSSIBILITIES - 1));\n\n  return randomNumber % POSSIBILITIES === 0;\n}\n\nconst respawnExtraFood = () => {\n  let newExtraFoodPosition = null;\n  while (newExtraFoodPosition === null || onSnake(newExtraFoodPosition) || Obstacles.onObstacle(newExtraFoodPosition)) {\n    const x = Math.floor(Math.random() * GAME_SIZE);\n    const y = Math.floor(Math.random() * GAME_SIZE);\n    newExtraFoodPosition = { x, y };\n  }\n\n  setExtraFoodPosition(newExtraFoodPosition);\n};\n","import { getSnakePosition } from \"./snake.js\";\nimport { getExtraFoodPosition, getFoodPosition } from \"./food.js\";\nimport { GAME_SIZE, isGameStarted } from \"./index.js\";\nimport { Points } from \"./points.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { getSnakeDirectionName } from \"./input.js\";\n\nconst drawElement = (position, className) => {\n  if (position) {\n    const { x, y } = position;\n    const bodyElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n\n    bodyElements[0].classList.add(className);\n  }\n};\n\nconst drawObstacles = () => {\n  const obstacles = Obstacles.getObstacles();\n\n  obstacles.map(({ x, y }, i) => {\n    const boardElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n    if (boardElements.length) {\n      boardElements?.[0].classList?.add(\"obstacle\");\n    }\n  });\n};\n\nconst initialBoardDraw = () => {\n  const gameBoard = document.getElementById(\"game-board\");\n  gameBoard.innerHTML = \"\";\n\n  gameBoard.style.gridTemplateColumns = `repeat(${GAME_SIZE}, 1fr)`;\n  gameBoard.style.gridTemplateRows = `repeat(${GAME_SIZE}, 1fr)`;\n\n  for (let i = 0; i < GAME_SIZE; i++) {\n    for (let j = 0; j < GAME_SIZE; j++) {\n      const boardElement = document.createElement(\"div\");\n      boardElement.classList.add(\"board-element\", `board-element-${i}-${j}`);\n      gameBoard.appendChild(boardElement);\n    }\n  }\n};\n\nconst laterBoardDraw = () => {\n  for (let i = 0; i < GAME_SIZE; i++) {\n    for (let j = 0; j < GAME_SIZE; j++) {\n      const boardElement = document.getElementsByClassName(\n        `board-element-${i}-${j}`\n      );\n      boardElement[0].classList.remove(\n        `body-segment`,\n        `food-segment`,\n        `food-segment--extra`,\n        `body-segment--head`,\n        `body-segment--head-left`,\n        `body-segment--head-right`,\n        `body-segment--head-up`,\n        `body-segment--head-down`\n      );\n    }\n  }\n};\n\nexport const draw = () => {\n  if (!isGameStarted) {\n    initialBoardDraw();\n  } else {\n    laterBoardDraw();\n  }\n\n  // wynik\n  const x = document.getElementById(\"x\");\n  const y = document.getElementById(\"y\");\n  const pointsEl = document.getElementById(\"points\");\n\n  if (x && y) {\n    x.textContent = getSnakePosition()[0].x;\n    y.textContent = getSnakePosition()[0].y;\n  }\n  pointsEl.textContent = Points.getPoints();\n\n  // end wynik\n\n  getSnakePosition().map(({ x, y }, i) => {\n    const bodyElements = document.getElementsByClassName(\n      `board-element-${x}-${y}`\n    );\n    if (bodyElements.length) {\n      if (i === 0) {\n        bodyElements?.[0].classList?.add(\n          `body-segment--head`,\n          `body-segment--head-${getSnakeDirectionName()}`\n        );\n      }\n      bodyElements?.[0].classList?.add(\"body-segment\");\n    }\n  });\n\n  drawElement(getFoodPosition(), \"food-segment\");\n  drawElement(getExtraFoodPosition(), \"food-segment--extra\");\n  drawObstacles();\n};\n","import { gameIntervelId, GAME_SIZE } from \"./index.js\";\nimport { Obstacles } from \"./obstacles.js\";\nimport { getSnakePosition, onSnake } from \"./snake.js\";\n\nconst restartGame = () => {\n  clearInterval(gameIntervelId);\n  window.location.reload();\n};\n\nexport const checkForDeath = () => {\n  const snakePosition = getSnakePosition();\n  const isHeadIsOnBody = onSnake(snakePosition[0], { withoutHead: true });\n  const isHeadOnObstacle = Obstacles.onObstacle(snakePosition[0], { withoutHead: true });\n  const isSnakeOutsideGame =\n    snakePosition[0].x < 0 ||\n    snakePosition[0].y < 0 ||\n    snakePosition[0].x >= GAME_SIZE ||\n    snakePosition[0].y >= GAME_SIZE;\n  if (isHeadIsOnBody || isSnakeOutsideGame || isHeadOnObstacle) {\n    confirm(\"Koniec gry.\", restartGame());\n  }\n};","const playButtonMusic = document.getElementById('play-music-button');\nconst playerElement = document.getElementById('player');\n\nplayButtonMusic.addEventListener('click', (e) => {\n  if (playerElement.paused) {\n    playerElement.play();\n    playButtonMusic.textContent = 'Pause music';\n  } else {\n    playerElement.pause();\n    playButtonMusic.textContent = 'Play music';\n  }\n})","window.addEventListener('keyup', arrowUp)\nwindow.addEventListener('keydown', arrowDown)\n\nfunction arrowDown(e) {\n  const key = document.querySelector(`.arrow-key[data-key=\"${e.keyCode}\"]`);\n  key.classList.add('press')\n}\nfunction arrowUp(e) {\n  const key = document.querySelector(`.arrow-key[data-key=\"${e.keyCode}\"]`);\n   key.classList.remove('press')\n}","import { draw } from \"./draw.js\";\nimport { checkForDeath } from \"./endGame.js\";\nimport { update as updateFood } from \"./food.js\";\nimport { update as updateSnake, getSnakePosition, onSnake } from \"./snake.js\";\nimport \"/music.js\";\nimport \"./keys.js\";\n\nexport const GAME_SIZE = 11;\nexport const GAME_SPEED = 2;\n\nexport let isGameStarted = false;\n\nconst main = () => {\n  update();\n  draw();\n  isGameStarted = true;\n};\n\nexport const gameIntervelId = window.setInterval(main, 1000 / GAME_SPEED);\n\nconst update = () => {\n  console.log(\"hej\");\n  updateSnake();\n  updateFood();\n  checkForDeath();\n};\n"],"names":["$0379ede947de91ce$export$78f72aca15d2b8f4","x","y","$0379ede947de91ce$export$f6b3620c8644578","currentSnakeDirection","$0379ede947de91ce$var$lastSnakeDirection","$0379ede947de91ce$var$getLastSnakeDirection","$0379ede947de91ce$var$setDirection","key","document","addEventListener","e","keyNumber","target","getAttribute","keyName","Number","$1bf822d9f03f4d1a$var$snakePosition","$1bf822d9f03f4d1a$export$ded1d07c75c5d29c","$1bf822d9f03f4d1a$export$28be8c991e35b4e3","newSnakePosition","$1bf822d9f03f4d1a$export$722fbec263ad908a","currentSnakePosition","inputDirection","console","log","i","length","slice","newHeadPosition","direction","$1bf822d9f03f4d1a$export$f7d30169ae36e02","element","options","withoutHead","some","segment","$1bf822d9f03f4d1a$export$5fc696b6f0d49101","snakePosition","$5ec5607e7d6e563f$var$obstaclePositions","$5ec5607e7d6e563f$export$c7227c6e188ae97","static","this","obstacles","getObstacles","$624917c8880ee964$export$1c787534cb11aa3e","points","$21581845d3143e01$var$foodPosition","$21581845d3143e01$var$extraFoodPosition","$21581845d3143e01$export$8375afbb03ac9b4c","$21581845d3143e01$export$5321e2bda8575dc2","$21581845d3143e01$export$722fbec263ad908a","setPoints","getPoints","$dad545c909cfec2d$export$3bd73fc649e9ea1a","$21581845d3143e01$var$respawnFood","$21581845d3143e01$var$shouldRespawnExtraFood","$21581845d3143e01$var$respawnExtraFood","newFoodPosition","onObstacle","Math","floor","random","$dad545c909cfec2d$export$38f891585d03ce96","$21581845d3143e01$export$4bcd21458045eba4","newExtraFoodPosition","$ac3888ccbf49bedd$var$drawElement","position","className","getElementsByClassName","classList","add","$ac3888ccbf49bedd$export$e529deb2bfd496dc","$dad545c909cfec2d$export$1568090200b360fa","j","remove","$ac3888ccbf49bedd$var$laterBoardDraw","gameBoard","getElementById","innerHTML","style","gridTemplateColumns","gridTemplateRows","boardElement","createElement","appendChild","$ac3888ccbf49bedd$var$initialBoardDraw","pointsEl","textContent","map","bodyElements","boardElements","$001607953185f538$export$e8a062691e6558ed","isHeadIsOnBody","isHeadOnObstacle","isSnakeOutsideGame","confirm","clearInterval","$dad545c909cfec2d$export$22a7dfc86488502a","window","location","reload","$5f26008d3422c6a9$var$playButtonMusic","$5f26008d3422c6a9$var$playerElement","paused","play","pause","querySelector","keyCode","setInterval","$dad545c909cfec2d$var$update"],"version":3,"file":"index.1e4b5625.js.map"}